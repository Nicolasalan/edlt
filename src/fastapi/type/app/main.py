import json
import base64
import uvicorn

from fastapi import File, UploadFile, Request, FastAPI, Form

from typing import Optional


app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.post("/upload")
def upload(filename: str = Form(...), filedata: str = Form(...)):
    print(filename)
    image_as_bytes = str.encode(filedata)  # convert string to bytes
    img_recovered = base64.b64decode(image_as_bytes)  # decode base64string
    try:
        with open("uploaded_" + filename, "wb") as f:
            f.write(img_recovered)
    except Exception:
        return {"message": "There was an error uploading the file"}
        
    return {"message": f"Successfuly uploaded {filename}"} 

if __name__ == '__main__':
    uvicorn.run(app, port='8000', host="0.0.0.0")

'''
/9j/4AAQSkZJRgABAQAAAQABAAD/4QHURXhpZgAASUkqAAgAAAAJAA8BAgAHAAAAigAAABABAgATAAAAkgAAABIBAwABAAAABgAAABoBBQABAAAAegAAABsBBQABAAAAggAAACgBAwABAAAAAgAAADIBAgAUAAAApgAAABMCAwABAAAAAQAAAGmHBAABAAAAugAAAAAAAABIAAAAAQAAAEgAAAABAAAAR29vZ2xlAABzZGtfZ3Bob25lNjRfYXJtNjQAADIwMjQ6MDE6MDIgMTM6NDY6MTkAEQCaggUAAQAAAMQBAACdggUAAQAAALQBAAAniAMAAQAAAMgAAAAAkAcABAAAADAyMTADkAIAFAAAAIwBAAAEkAIAFAAAAKABAAABkQcABAAAAAECAwAJkgMAAQAAAAAAAAAKkgUAAQAAALwBAACQkgIAAwAAADAwMACRkgIAAwAAADAwMACSkgIAAwAAADAwMAAAoAcABAAAADAxMDABoAMAAQAAAP//AAACoAQAAQAAAAAAAAADoAQAAQAAAAAAAAADpAMAAQAAAAAAAAAAAAAAMjAyNDowMTowMiAxMzo0NjoxOQAyMDI0OjAxOjAyIDEzOjQ2OjE5AKAPAADoAwAA6AMAAOgDAACAlpgAAMqaO//bAEMABQMEBAQDBQQEBAUFBQYHDAgHBwcHDwsLCQwRDxISEQ8RERMWHBcTFBoVEREYIRgaHR0fHx8TFyIkIh4kHB4fHv/bAEMBBQUFBwYHDggIDh4UERQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHv/AABEIA8AFAAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AOyECbcBBgdMUnkY6Fl+hqTmgFhXknokYRx/Hn6ij5h95AalJOKQZI6CkBENvowpQV6Bh+NP+XPIo2gjr+YpjG5PoDSgg9QRR5SH2oEP91z+eaQgNKAD1T8qURuByQfwowR2P4GmAmwf3iPrR5b9mBpf+BY+ooGexBoGNMZ9M00xjHQg1KMjqDS5Pr+dIRVPH8X5005z2q0VBHzIPwpnlx/7S0AQBz0xinhyPWnGFezj8aBDJ2INAxQ5xShweoBpm117UfVTTAcVib+ACo2iA5R2FOG3PUinZyOtAEBDjuG+opDkdY/yqY0gx2P50gIN46fMPqKPlPcVPg9wDTSqHqtFgIsehoz2zSmJc9SPoaaUYfdfP1FAC7fUCk245GaQ7x1AP0oEjL1Vh+FAxw+maMD0NN8xTT1Zcd6QhvlqejYo8tscbTTxgjqKXHHSgCAow6rSYWrG4Y603Ge2aAICPpSFfbFTMuPb6imBT2xQMjUHpu/OmmMHIZQRUpDDtSA+woArPax5yAR9DimG2lHKSt+PNW2z6UzAz1NAFQi6X+FG/SmmZx/rIXHuOauk9jzTcAjO2gZTFxCTjfg+9ODKejA/Q1PJFG45XP1FQGzgPRSP904oAdSfWmG3df8AVzP9DzTQtwvVUcflQBLgYzSYBqLziv34nX6DNOSeJuBJg+9AAyEHimFT6VYHIyGVvxpQPVaQFPHuaTaPWrTIn0prQcZGDQBXB7ZxSj6A08xkcUm0jrQMaWA7EUm5e+DTtpOaaV+lACHB6CmMox1qQrx1puGHfNAEJT0pNrf3qfnB5FGc9MUAMO4fw5+lN3L/ABAj8Kl+emsT3FADFZD0YGlBxSFUP8IppjH8LFaAH5Bo2A96jw6/xA/UUu4jqv5GgBdjeuaawPcU4SLjk4+tO3Ke9ICAkdjikB44IqfCH0ppiHYUAQ5PrRknjmnMhFN2sDzmgYh4pAzA9cinZPakznrQApbIwRTSg7HNIc+ppMnuaAEII9aYyg9VBqTcTzTfrTAgNtCT93B9RxSGCRB+7mP0PNSsRnjNNzQBETOn3oww9QaaJ1/iDJ9RVjJxxSckdM0wIhIj/dYNSHH0pXhiOcoAfUVEYSB8krD2PNADiQf4qb0zxTCJ17K49uKb5rL95GH4ZoAkoB4pqTIR1FOyPWgBMijJpcA9DSHFADS3qKQgUuFNIRQA0jjAIpMMBSgZJpdpxQBHk9KOT1p2DRkjsKBkeD2ppjz2qXNG4Y60AReWVHDGky/oDUpzimngUAR7hnkEGnB/oaDgj0puwEUAOyp7U0qD0NG3A4zTfm9AaAEKN60zmn7sHnIoD/Q0AMGM89KUbaflTQFX0oAaM9jRhqNuPajntigBCcdaQmgse4qMkZ4NMBc0n40oP40h9qADp3pPwpQu7vxSDjNAhmM0gXEn4U9f60D/AFv4UAHalT7ppDTl+5SGRmlPSl70GgQ3HGajl+4al7Go5v8AVGmgG2Q/cfjUzDiorD/UfjU7Hg0AM4wKCBRjgUY5FIBoHWlQ4zQRzQKAFHQ1E336lUZqJgfMIpoBwoxwaUjAoHSgBtN70rcUnagBRzTu1MU9qf0FMBuOaQjOaUetL/CfpSEQwYyalxiorbqfrU4HNMEMpO9ObikUUDF7UCkI5xSqKQhvelNJj5sU5sAUwGDoaToaVR1pCPmoAY5/eVMh+WoX+/UqDigBM80p9qMc0tADV4pTSd6dQAlBpaQigD35Vc+lIQR1FRiOQdJ/zWnA3AH8DfQ4oMx350A+9M81x9+GT8BmgXEROCcexBFAEnXsKbt9qVWib7rD8DUgUYoAYo9T+dG0A9acVPYim8+lAh4XI4NJtcdCKaCR3x+FOWRh1waADDHqtM2r3FTLIO4pSyEcgUAVyg7Ej6GkKSD+PP1FWMJ6UFR2oHcrrvHVR+BpNxHUN+VT7D2IpMMOozQFyHcp4Dj8eKNvcD8QalIU9V/SmhI/QD8aAGZYfxH8aAzH0NSBV7M386QoPUGgCM47qabhT6CpChx0/I0g4HOR9RQAzZnp/OmlG/8A1ipBgnjH4Gglh3NAyHa/saNrDsRUn5GjHqD+BpAQmlGD2AqXA9abgdgDQAmPcUgUe9O2qR0xShOOtAETRJ3/AFFIIVHQj8KmC46HNKUyORQBXMeOham/vB/EDVkKMU0rmgCHcQPmXNAdD6rUu3Pb8qTBH/1xQAwc9JAfrSEY6rT/AC1b+EfhTDF6Oy0ANIPrRtB64NLslxwyv9ajbeD80R/A0DAr9aaEz704On94g+4o3ehBpAMKEetN2n0FSHB65/Ck4FAEQBpCp9ql2jqKac0ARcjqKafrUv1xQVGKAIMA9xTWjRhztP1FS+WD2pBGR0GRQMqm3iPTK/7pxQscqfcnbHvzVkpg/do+X0xQFyAG5A5WOT9KPMI/1kTp7jmrA2455oG3tx+NAEKSxt0cH608hT2BpWjVvvKrfhUf2dCfl3L/ALpoAQxgngEU0xH+9mnGGUfcmz7MKYfPXO6NW91NACFPaonVgOhqUSqPvK6/UUnmqejg+xpDK56cg0nH0q1wf4c/jTfLQnnj60AVx
'''
